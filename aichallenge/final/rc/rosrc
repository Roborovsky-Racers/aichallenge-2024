if [ -z "${ROS_WS}" ]; then
  export ROS_WS=/aichallenge/workspace
fi
function cb() {
    common_args=(
      --symlink-install
      --parallel-workers "$(($(nproc)-2))"
      --cmake-args
      "-DCMAKE_BUILD_TYPE=Release"
      --no-warn-unused-cli # suppress CMake warning of "Manually-specified variables were not used by the project:"
    )

    cd ${ROS_WS}
    if [ $# -gt 0 ]; then
      colcon build --packages-up-to "$1" "${common_args[@]}"
    else
      colcon build "${common_args[@]}"
    fi
    cd - &>/dev/null
}

function cs() {
    # Check if the ROS_WS/install/setup.bash exists before sourcing
    if [ -f "${ROS_WS}/install/setup.bash" ]; then
        source "${ROS_WS}/install/setup.bash"
    else
        echo "Warning: ${ROS_WS}/install/setup.bash does not exist."
    fi
}

function cc() {
    cd ${ROS_WS}
    rm -rf build install log
    cd - &>/dev/null
}

function ct() {
    if [ $# -gt 0 ]; then
      cb "$1"
      cd ${ROS_WS}
      colcon test --packages-select "$1"
      cat ${ROS_WS}/log/latest_test/"$1"/stdout.log
      cd - &>/dev/null
    else
      cb
      cd ${ROS_WS}
      colcon test
      colcon test-result
      cd - &>/dev/null
    fi
}

source /opt/ros/${ROS_DISTRO}/setup.bash
if type register-python-argcomplete3 > /dev/null 2>&1; then
  eval "$(register-python-argcomplete3 ros2)"
  eval "$(register-python-argcomplete3 colcon)"
  source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
elif type register-python-argcomplete > /dev/null 2>&1; then
  eval "$(register-python-argcomplete ros2)"
  eval "$(register-python-argcomplete colcon)"
fi

# colcon_cd
source /usr/share/colcon_cd/function/colcon_cd.sh
export _colcon_cd_root=${ROS_WS}
alias ccd='colcon_cd'

# alias definitions
alias rdi="rosdep install --from-paths src --ignore-src -r -y"
alias rkill="ps -ef | grep -e /opt/ros/\${ROS_DISTRO} -e /aichallenge -e /autoware | grep -v grep | awk '{cmd = \"\"; for(i=8;i<=NF;i++) cmd = cmd \$i \" \"; print \$2, cmd}' | while read pid cmd; do echo \"kill process: PID \$pid Command: \$cmd\"; kill -9 \$pid; done"

# Register completion for colcon
_colcon_package_complete() {
    local current_word
    current_word="${COMP_WORDS[COMP_CWORD]}"

    # Get the list of package names using colcon list
    local packages
    packages=$(COLCON_LOG_PATH=/dev/null colcon list --base-paths ${ROS_WS} | awk '{print $1}' 2>/dev/null)

    # Filter the package names based on the current word being completed
    COMPREPLY=($(compgen -W "$packages" -- "$current_word"))
}
complete -F _colcon_package_complete colcon_cd
complete -F _colcon_package_complete ccd
complete -F _colcon_package_complete cb
complete -F _colcon_package_complete cc
complete -F _colcon_package_complete ct

# Avoid build warnings from setuptools with colcon and import warnings from pkg_resources with vcstool
# - https://robotics.stackexchange.com/questions/24230/setuptoolsdeprecationwarning-in-ros2-humble/24349#24349
# - https://github.com/ament/ament_cmake/issues/382
# - https://github.com/dirk-thomas/vcstool/issues/269
export PYTHONWARNINGS="ignore:easy_install command is deprecated,ignore:setup.py install is deprecated,ignore:pkg_resources is deprecated as an API"

# source ROS_WS
cs

export AWSIM_PATH=/aichallenge/simulator/AWSIM_CPU

sudo ip link set multicast on lo
sudo sysctl -w net.core.rmem_max=2147483647 >/dev/null

function rps() {
  ros2 param set mpc_controller $1 $2
}

function vmax() {
  ros2 param set mpc_controller v_max $1
}
function aymax() {
  ros2 param set mpc_controller ay_max $1
}
function stgain() {
  ros2 param set mpc_controller steering_tire_angle_gain_var $1
}
function acclpf() {
  ros2 param set mpc_controller accel_low_pass_gain $1
}
function stlpf() {
  ros2 param set mpc_controller accel_low_pass_gain $1
}
function wpoff() {
  ros2 param set mpc_controller wp_id_offset $1
}

PS1='\[\033[01;33m\][DOCKER]\[\033[01;30m\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
cd /aichallenge

echo -e "\e[33mrosrc is successfully loaded!\e[0m"
